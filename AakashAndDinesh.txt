

	Application Development
	
		for themself -> Product
		
		to a client
		
			Services
			
				Accenture, CTS, TCS
				
				
				
	Application development
	
		Web Application
		
			Presentation
			
				Web application technologies
				
					MEAN - WEB Framework to develop web application
					
						MongoDB -> Database
						
						EXPRESS -> serve the data from Database
						
						ANGULAR -> Application which create UI for u
						
							HTML, CSS and Javascript
						
						NODE -> Platform running ur application
	
	Setup
	
		VS code application
		Chrome browser		
		Internet
		
	
	
	Front END
	
	
		Web Application => Final => Browser
		
		
			Browser => HTML, CSS and JS
			
	Front end development Core languages
	
		HTML, CSS and JS => Angular, ReactJS, VueJS (Frameworks)
		
	Chrome Browser is an Application 
	
		=> Browser Engine 
		
	
	
	HTML
	
		MS Word => electoric Document => file
		
		HTML => Web electoric document => web Page
		
		HyperText Markup Language
		
		
			create one file with extension .html
			
			
			Basics:
			
				tag based 
				
				<a> Data  </a> => equalent UI view
				
				<p>  Data </p> => Equalent UI 
			
		
			Basic Structure of HTML
			
				index.html
			
				<html>				
					<head>
						<title> First Page </title>
					</head>					
					<body>
						Whatever u write here
						
						<p> this is my first page </p>
					</body>				
				</html>
		
		
		Basics of HTML tag
		
			1. Every tag has open and end tag
			
				ex: <h1 > </h1>
				
			2. Tag attribute
			
				Only On start tag
			
				<h1 id="firstH1" > </h1>
				
				<h1 id="firstH2" > This is my firsy </h1>
				
				<h1 id="firstH3" > </h1>
				
				<h1 id="firstH4" > </h1>
				
				id, name, style, class, 
			3. Not case sensitive
			
				<H1> </H1> 
				<h1> </h1>
				
			4. Some HTML tags are Exception
			
				<some-tag  />
				
				<br />
				
		
		
	Text Editing 
	Presentation Tag
	
		Heading tags
		
			<h1> </h1>
			
			<h2> sfasasfdafdaafasdsdfd </h2>
			
			<h3> </h3>
			.
			.
			.
			
			<h6> </h6>
			
		Paragraph
		
			<p> </p>
			
		List tags
			
			Unordered List 
			
				List Item
			
			<ul>
				<li> Indian Cricketer </li>
				
				<li> CSK Player </li>
			
			</ul>
			
			Ordered List
			
			<ol>
				<li> ICC T20 </li>
				<li> ICC champions Trophy </li>
				<li> ICC 50 over </li>
			</ol>
			
		Table tag			
		
			<table border="1">
				<tr> 
					<td> Name </td>
					<td> Id </td>
					<td> class </td>
					<td> section </td>
				</tr>
				<tr> 
					<td> Name </td>
					<td> Id </td>
					<td> class </td>
					<td> section </td>
				</tr>
				<tr> 
					<td> Name </td>
					<td> Id </td>
					<td> class </td>
					<td> section </td>
				</tr>
				<tr> 
					<td> Name </td>
					<td> Id </td>
					<td> class </td>
					<td> section </td>
				</tr>
			
			</table>
			
	Interaction to our page
	
		Anchor Tag
		
			<a> Display Text </a>
			
			Allow you to go another page (HTML)
			
			<a href="about.html"> Display Text </a>
			
			
			<a href="https://www.google.com/" > Go TO Google </a>
			
			
			<a href="https://www.google.com/" target="_blank" > Go TO Google </a>
			
			
			<form>
			
			</form>
			
			<some-tag>
			
			Input tags
			
			<input /> equalent to <input type="text" /> , by default type is text
			
			<form>
				<input type="text" />
				
				<input type="number" />
				
				<input type="email" />
				
				<input type="password" />
				
				<input type="checkbox" />
				<input type="radio" />
				
				<select> <option> </option> </select>
				
				<button type="button"> submit </submit>
				<button type="submit"> submit </submit>
				
			</form>
				
				
			</some-tag>
			
		
			
			
				
			
			
				HTML  -> Presentaion -> input 
				CSS	-> styling -> alignemnt, colorings
				JS -> Processing ur input
		
		
			<b> </b>
			
			<strong> </strong>
		
		
	
		grouping tags -> Optional
		
			section -> large category
			
			div -> small and tiny	
			
	
	
		
		Formatting our HTML
		
			Styling our page
			
		HTML, CSS, JS
		
		CSS
			Cascading Style sheet
			
			
		All your default view of HTML is based on default configuration of browser CSS
			for h1, there will be some default CSS will be configured
			
			
			
		
		How to add custom styling to our page
		
			1. Inline Style
			
				
				<h2>This is my First Page</h2> // default view
				
				
				<h2 style="color: red;" >This is my First Page</h2>
			
			2. Internal Style
			
					 using style tag <style> </style>
					 <head>
						<title> Tab Name </title>
						
						<style> 	// Internal styling		
										
							h2 {
								font-family: 'Comforter', cursive;
								font-size; 24px;
								text-align: center;
								text-transform: capitalize;
							}					
						
						</style>
					
					</head>
					
			
			3. External Style
			
				css in a seperate file and linked to our application
				
				file must me .css
				
					my-styles.css
			
	
		
		Styling syntax:
		
			key: value; key1: value1;
			
			
			color: red;
			
	
		Text styling
		
			Text color
			
			 key = color
			 
			 value = red, blue, green, 
			 
				named colors = red, green, blue, yellow, 
				
				creating color:
				
					RED, GREEN  and BLUE => Primary colors
					
					100, 100 and 100
					100, 100 and 100
					
					10 + 10 + 10 => new colorings
					100 + 100 + 100 => white
					0 + 0 + 0 => black
								   0 ---------------------------100;
						   #RGB -> 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f;
					color: #000;
					
					color: #b3089a;
					
					color: #00ddff;
					
					color: #3daf24;
					
					color: #ff0000; -> Red
					color: #00ff00;  -> Green
					color: #0000ff; -> blue
			
			background color:
			
				key = background-color: red, gree, #aa00ff;
				
				
			Text alignement
			
				key = text-align
				
				text-align: left | right  | center | justify
				
			Text case:
			
				uppercase, lowercase, capitalize
				
				key = text-transform
				
				text-transform: uppercase  | lowercase
				
				
			Font size
			
				key = font-size
				
				font-size: 16px
					
					
					
		Font style
		
			key = font-family
			
			font-family: 'arial';
				
				
			font-family: 'Comforter', cursive;
			
	
	
	what to learn in css
	
	
		1. keys and values for ur change
		
		2. how we are appying style
			
			CSS selector
			
				How to select an element and apply style 
						
				
				
			1. Element selector
			
				h2 {
					font-family: 'Comforter', cursive;
					font-size; 24px;
					text-align: center;
					text-transform: capitalize;
				}				
				all h2 elements in our page will receive this style
				
			2. Attribute Selector
			
				h2[id="someValue"] {
				
				}
			3. class selector			
				
				.my-class {
					font-family: 'Comforter', cursive;
					font-size; 24px;
					text-align: center;
					text-transform: capitalize;
				}
				
				
				
			style will be merged
			
			
				style>
				
				
					h2 {
						 color: #7e2d2d;
					}
				
				
				
					h2 {
						font-size: 16px;
					}
					
					
					h2 {
						color: #232343;
						font-size: 16px;
					}
				
				
		
		Element Box
		
		
			for every element there is box 
			
			
			Content
			
			
				whatever value we give in the element
				
					<h2> This is my content </h2>
					
					
				Border ( Ellai kodu)
				
					a line around ur element
					
					by default border will be 0
					
					css
					
						border: 2px solid #000;
						
								line height,  what type of line , what is the color of line
								
				Padding 
				
					Distance between border and content
					
					padding: 10px;
					
				Margin
				
				 margin: 10px;
				 
				 
				margin: 10px; padding: 10px;
				
				top, bottom, right, left 
				
				margin-top: 10px;
				margin-bottom: 10px;
				
				padding-top: 10px;
				
				
				Mouse Icon
				
					cursor: pointer;
					
				box shadow
				
					box-shadow: 10px 10px 10px 10px;
					
								horizontal  vertical sharp spread;
					
					
			
				.my-class:focus {
					border:
				}
				
				Mouser hover
				
					#id:hover {
						style
					}
								
					
					
					
		2 type
			
			h2 -> 
			
		Block elements
			
			it will take entire width
			
			Height: based on content
			
			h1. h6, p, div,
			
			always starts new line 
			
			dominate
			
		Inline-elements
		
			only takes width of ur content
							
	
	
		<p> </p>
		
		<p> </p>
		
		<a> 
		
		
		
		<a>
		
		
		
		<a> content
		
		<p>
		
					
				display: block;
		<p> </p>
		
		<p> </p>	

		Flex
		
			display: flex;
			
			<p> First </p>
		
		<p> Second </p>
		
		
		First Second
		
		Aakashrocksmsd@gmail.com
		
		dineshpalani2001@gmail.com
		
		
		CSS 
		
			Flex - Layout design
			
			<div style="display: flex;" >
				<p>  MSD </p>
				<div> </div>			
			</div>
			
			
			div - Parent			
				
				p - child 
				div - child
				
				p and div - siblings
				
				
		Alignment
		
			justify-content - x-axis
			
			align-items	
			
			
			
		One in starting -- another one in end
		
			justify-content: space-between;
			
		both childs in center
		
			justify-content: center;			
								
								
		y-axis
		
			align-items: center
			
			
		CSS Libraries
		
		
			Bootstrap
			
			Angular Material
			
			
			margin: 10px;
			
			.m-1 {
				margin: 10px;
			}
			
			<h1></h1>
		
		HTML, CSS
		
			Syntax base languages
			
		Javascript
		
			Programming Language
			
				Browser -> compile and execute
		
		
		
		Page Interaction
		
			Form Tags
			
				Button, Link, input text box
			
		Browser Engine
		
			JS Engine 

		
		How to bring JS to HTML
		
			1. <script> </script>
			
			2. Create a seperate file with .js extension 
			
				my-page.js
				
		Global Objects
		
			window, document 
			
		
		JS programming Language
		
		
			Input type
			
				numbers:  1, 2, 1.2, -1. 1.33232,				
				
				Text: snaksndkjasnasksasaksnkasnnsasan
				
				Browser Engine
				
					Libraries
					
			Browser Console
			
				Playground
				
				console.log(1+1)
				
				
				
			Data Types
			
				number
				
				string
				
				boolean : true, false
				
			How to create a data in our JS
			
				var, let and const
				
				
				var firstInput = 2;
				var secondInput = 3;
				var result = firstInput + secondInput;
				
				let firstInput; // Declare
				let secondInput;
				
				
				firstInput = 2; // Assingment
				secondInput = 3;
				
				const data = 3;
				data = 4;
				

					variable name rules
					
						1. no space
						2. should not start with number
						first name
						
						 first_name
						 
						 
				
				var name = 'Dinesh' or "Dinesh"; => Text or String				
				var age = 22 or 22.5 or -1222;				
				var education = 'B.com';
				var courseCompleted = false;
				
				console.log(name);
				
				
				
				var dineshDetails = {
					name : 'Dinesh',
					age : 22,
					education: 'B.com'
				}; // Object =>  Javascript Object Notation => JSON
				
				
				console.log(dineshDetails.name);
				
				
				Function:
				
				
					a particular set of lines will be executed whenever we want
					
					function print() {
						//Line 1
						// Line 2
					
					} // function declaration
					
					In memory, print() = {};
					
					
					print(); // Function calling
				
						 
						 
			Object represents something
			
			
				Akash
				
					{
						name: 'Akash',
						age: 11,
						printMyHobbies: function() {
							console.log('
						}
					}
					
				Dinesh 
				
			
			
				Car  
				
				var myBWMCar = {
					color : 'red',
					model: 'BMW',
					turnLeft: function() {
						// lines to do to turn car left
					}
				}
				
				myBWMCar.turnLeft();
				
				
				
		Global Objects
		
			browser engine consists some object
			
				window
				
				document => current page 
				
						textarea id="myTextBox"
						
						document.getElementById('myTextBox').value
				
				localStorage
				
				console
				
					log: function
					
				sessionStorage
				
				
					
				
			
			
				
				
				
						
	 Looping in JS
	 
		For loop
							var d = ["t","s", "saa", "sa"]
							
							d[0]
		
			for(var obj1 of d) {
			
				console.log(obj1);
				
			}
			
			
		check condition
		
			only If 
			
				if ( condition ) {
			
				}
			
			if and else
		
				if ( condition ) {
				
				} else {
				
				}
			
			
		
		HTML Interaction
		
			document
			
				getElementById('myId') // return single object
				
					id mostly it should be unique
				
					it will return HTML tag which has id as myId
					
					.value => textbox
					
					p, div, => presentation
					
					.innerText
					
					var myElement = document.getElementById('myId');
					console.log(myElement.value); // Accessing value
					
					myElement.value = "121212"; // Assigning value
					
				we can change text, we can add or remove Css class
				
				getElementsByClassName('info')
				
					array of elements which has css class as info
					
				getElementsByName('somename')
					
						array of elements which has name as somename
						
				
				querySelector()
				
					querySelector('#myId') => first element which has id as myID
					
					querySelector('.info') => first element which has css class info
						
				querySelectorAll()
				
					querySelector('#myId') => array of element which has id as myID
					
					querySelector('.info') => array of elements which has css class info
					
					
					
					
					
					
			var add = function(num1, num2) {  
			
					console.log(num1 + num2); 
				}
				
			var add = (num1, num1) => {
					console.log(num1 + num2); 
				} // Lambda expression
				
				
				
			
			create 100 same type of object
			
				
				we have to create a prototype
				
				
		var d =		{
						name: '',
						age: '',
						education: '',
						printMyAge(){}
					}
					
					Blueprint of an object
					
						Class
						
						
						class Student {
						
							constructor(studName, studAge, studEdu) {
								this.name = studName;
								this.age = studAge;
								this.education = studEdu;
							}
							// Object constructing
							
							printMyAge() {
							
								console.log('I called ');
							
							}
								
						}
						
						
						var student1 = new Student('Akash', 22, 'b.com');
						
						student1 => memory wil be created
						
						In memory =>
							{ name: 'Akash', age: 24, education: 'B.S.c' }
						
						console.log(student1);
						
						var student2 = new Student('DInesh', 22, 'b.com');
						
						console.log(student2);
						
						
						{ name: 'Dinesh', age: 22, education: 'b.com' }
						
						{ name: 'Akash', age: 24, education: 'B.S.c' }
						
						console.log(student1.name);
						
						console.log(studen2.name);x
						
				
				
			
				
				

			
			
			
			
			
			
			
			
								
								
	Javascript
	
		1. Programming
		
				data create
				
					var data = {};
					object
					class
				for
				
				if
				
				
		2. HTML Interaction
		
			finding an element
			
			adding element
			
			changing text
			
	

	
	Web application
	
		HTML, CSS, JS
		
		
	Frameworks
	
		Angular, ReactJS, VueJs
		
			Make web development easier
		
		Angular Framework:
			Rules
			
			
			
		
	Disadvantage of Javascript
	
		data type 
		
	
	
	Javascript one layer
	
		
	Typescript
	
		superset of javascript
		
		var num1: string;
		
		num1 = "text";
		
		num1 = 10;
		
		
		Installing Typescript
		
			1. Open ur command promt
			
			2. type
			
				tsc -v
				
					if u see 'tsc is not recognized......'
					
						there is no typescript in our system
						
					so
						1. Check ur system has node
						
							open command promt
							
								node -v
								
								if u see 'node is not recognized......'
								
									so
										install node
										download node js
											https://nodejs.org/en/download/
											
										install the msi file
										
								If no error
								
									v.14.10
									
									check NPM - Node Package Manager
									
										npm -v
					
										No error
		
						npm install -g typescript
						
						tsc -v
						
							version
							
							now typescript available in our system
							
							
					
	
			var num1 : number;
			
			var stud : Student;
			
			var myBoolean : boolean;
			
			
			TS -> we can write JS in more strict and trust manner
			
			
			Compile
			
				TS to JS
				
				tsc filename.ts
				
					filename.js
					
			Add watcher
			
				tsc filename.ts -w
				
			
			
			
		
		Node
		
			node -v
			
			 V.ssd
			 
			
			Browser => browser engine
			
							=> v8 browser engine
							
							v8 browser Javascript engine => window application
							
								browser Javascript engine as a application
								
			Node is a system level javascript runtime
			
				npm install -g typescript
				
				node package manager
					
						typescript
					
							npm install bootstrap
						
						node_modules
						
							bootstrap
							.cs
				
			
			Node will be used to setup our development environment
			
			
			Node is platform
			
				
				
			Angular
			
				Framework
				
					- is a bundle
					- Single Page Application - SPA Architecture
					
						1. Only one html file with structure
						
							Base html or Root Html
						
							<html>
							
								<head>
									style
									js
								
								</head>
								
								<body>
									
									<!-- place holder->
									
								</body>
							
							</html>
							
						2. As many as html can be created
						
							<div> 
							
								<h2>
								
								<p>
							</div>
			
			
		3. Angular Installation
		
		
			Steps:
			
				1. check angular
				
					ng --version
					
					if 'ng is not recognized'
					
					so install angular
					
					
						npm install -g @angular/cli
						
						then again
						
						ng --version
						
						v.12.12
						
						
			1. Creating first application
			
				Command to create new application
				
					ng new "ApplicationName"
					
					ng new MyFirstApp
					
					 Questions 
					 
						1. survey -> N
						
						2. Routing -> N
						
					Running the application
					
						ng serve
						
							localhost:4200
							
						ng serve --port=4221
								
						
		
		3. What we have to do in Angular applicaiton
		
				1. Find root html
				
					src folder -> index.html 
					
									(Structure)
									
				2. Src 
				
					Navigation
					
						navigation.html
						
							navigation.component.html
							navigation.component.css
							navigation.component.ts
							
								Custom HTML tag - <dinesh-navigation> </dinesh-navigation>
							
						
							all html codes for that						
						
						scrollingimage.html
							scrollingimage.component.html
							scrollingimage.component.css
							all html code for image scroll
							
							<dinesh-scrollimage> </dinesh-scrollimage>
							
				Component Based development
					Functionlity based component
					
					
				One component => combination of 3 files
				
									.html, .css, .ts var myVar= {}
									
				
			app.component.html
			
			app.component.css
			
			app.component.ts
			
			AppComponent  -> <app-root> </app-root>
			
				Root Component
							
							
		
			app.component.html
			
				<dinesh-navigation> </dinesh-navigation>
				
				<dinesh-scrollimage> </dinesh-scrollimage>
							
							
							
						
							
							
	How component works
	
	
		component.ts
		
			
			@Component({
				selector: 'app-root', // a text to be given as HTML <app-root> </app-root>,
				
				templateUrl: './app-component.html',
				styleUrls: ['./app-component.css']
			})			
			export class AppComponent {
					// Javascript file for ur HTML
					// Controller
			}
			
			// One component
			
	Bootstrap
	
		How to integerate Bootstrap
		
		
			First install bootstrap
				npm install bootstrap
				
				under node_modules
				
		Linking to our applicaiton
		
			angular.json
			
				-> all configuration about application
				
				
				29 -> styles : [
				
						path for our css
						'./node_modules/bootstrap/dist/css/bootstrap.min.css'
					]
					
	Presentation
	
		only presentation tags
		
		Static Data
	
		Data (TS) -> HTML
		
	Interaction
		
		handling click or events
		
		Forms
		
			How to get Inputs from user
			
			how to handles input data
			
	How to handle data from outside	
	
		outside of our angular applicaiton
		
	
	
	Data projection to HTML
	
	
		Data Binding:
		
			Data from TS will be binded to HTML
			
			TS, HTML, CSS => Binded together
			
			
			Angular way
			
			TS
			
				title = 'MyFirstApp';
				
			HTML
			
				<p> {{ title }}  </p>
				
				
				{{}} => String interpolation
				
				{{ 1 * 3 }}
				
			<p> </p>
			
			
			
	
		Directives
		
			<p id="myId" name="myName"  > </p>
			
			It will work on our HTML Tag
			
		1. Hide and show
		
			*ngIf=""
			
			showLogin: boolean = false;
			
			
			<p id="myId" name="myName" *ngIf="showLogin" > </p>
			
			if(true | false) {
			
			} else {
			
			}
		
		2. Repeating HTML using NgFOr
		
				myArr: string[] = ["akash", "Dinesh", "Magesh"]
				
				{{ myArr }} => akash,Dinesh,Magesh
				
				for(var str of myArr) {
					console.log(str);
				}
				
				<p *ngFor="let str of myArr" > 
					{{ str }} 
				</p>
				
				<div *ngFor="let str of myArr" >
					<p> {{ str }} </p>
				</div>
				
				<div>
					<p> Akash </p>
				<div>
				
				<div>
					<p> Dinesh </p>
				<div>
				
				<div>
					<p> Magesh </p>
				<div>
				
				
		Data in TS displayed in HTML
		
		.js
			function one() {
			
			}
		
		<button onclick="one()" >
		
		<button (click)="one()" > CLick me </button>
		
		
		Steps
			
			1. Created Products Array
			
					products: Product[];
			
					Length = 9
					
			2. Using ng For we displayed Producrs
			
			
				<div *ngFor="let myProd of products">
				
			3. Created seclectedProduct variable in controller
			
				seclectedProduct: Product;
				
			4. Assigned first product as value
				
				seclectedProduct: Product = products[0];
				
			5. Displayed SelectedProdcut Details in HTML
			
			
			6. Created a method called selectProduct(prod: Product) 
			
			
			7. Inside that function I changed seclectedProduct value with received value
			
				seclectedProduct = prod;
				
			8. called this selectProduct method in ngFor of products
			
		
		
	Angular given a root component (Base)

		app.component.html
		
		app.component.css
		
		app.component.ts
		
			We have to create our own components
			
			Based on our applicaiton we have to decide how many components needed
			
				Navbar
				
				Login
				
				Products
				
				Product-Detail
			
			
		Steps to create a component
		
			1. Manually
			
				-> Create a folder with ur component name
				
					navbar
						navbar.component.html
						navbar.component.css
						navbar.component.ts
						
							<da-navbar> </da-navbar>
							@Component({
								selector: 'da-navbar',
								templateUrl: './navbar.component.html',
								styleUrls: ['./navbar.component.css']
							})
							export class NavbarComponent {
							
							}
							
				-> We have to intimate Angular
				
					app.module.ts
					
						Registration  file
						
						
						@NgModule({
							
							declarations: [NavbarComponent ]
						
						})
						export class AppMOdule {
						
						}
						
						
		2. Using Commands 
		
			Command to create a component
			
				ng generate component 'ComponentName'
				
				ex: 
					ng generate component products
					
					short form
					
						ng g c 'ComponentName'
						
					example
					
						ng g c product-detail
			
			
		
	
		
				
			
			
		
		
		
		
		
		
		
				
				
						
				
							
							
			
			
								
								
								
								
								
								
								
								
								
					
			
				
				
				
					
	
		
	
					
		
			
			
	
		